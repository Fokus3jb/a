#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
using namespace cv;
int main() {
	VideoCapture cap("20190703_002007.mp4");
	if (!cap.isOpened())  return -1;
	Mat im;
	for (; ;) {
		Mat mat, frame;
		cap >> frame;
		cv::resize(frame, frame, cv::Size(500, 700));
		mat = frame;
		if (mat.empty()) break;
		cv::cvtColor(mat, mat, cv::COLOR_RGB2GRAY);
		cv::GaussianBlur(mat, mat, cv::Size(3, 3), 0);
		cv::Canny(mat, mat, 40, 250);

		std::vector<std::vector<cv::Point>> points;
		auto kn = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(3, 3));
		cv::dilate(mat, mat, kn);
		cv::findContours(mat, points, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_SIMPLE);
		for (int i = 0; i < points.size(); i++) {
			std::vector<cv::Point> _points;
			double len = cv::arcLength(cv::Mat(points[i]), true);
			if (len < 250) continue;
			cv::approxPolyDP(points[i], _points, len*0.02, true);
			cv::Moments m = cv::moments(_points);
			cv::Point centm(m.m10 / m.m00, m.m01 / m.m00);
			drawContours(frame, points, i, cv::Scalar(255, 0, 0), 2);
			drawMarker(frame, centm, cv::Scalar(0, 255, 0));
		}
		cv::imshow("fff", frame);
		if (waitKey(30) >= 0) break;
	}

	return 0;
}
